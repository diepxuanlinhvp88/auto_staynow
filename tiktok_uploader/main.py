from tiktok_uploader.VideoEditor import VideoEditor
from tiktok_uploader.Video import Video
import requests
from pathlib import Path
import random
from tiktok_uploader import tiktok
import shutil
import time
from datetime import datetime

def get_rooms_from_api(limit=100):
    """
    L·∫•y danh s√°ch ph√≤ng t·ª´ API
    :param limit: S·ªë l∆∞·ª£ng ph√≤ng mu·ªën l·∫•y
    :return: Danh s√°ch ph√≤ng ho·∫∑c None n·∫øu c√≥ l·ªói
    """
    try:
        url = f"https://staynow.id.vn/api/v1/rooms?limit={limit}"
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()  # API tr·∫£ v·ªÅ tr·ª±c ti·∫øp danh s√°ch ph√≤ng
        else:
            print(f"L·ªói khi g·ªçi API: {response.status_code}")
            return None
    except Exception as e:
        print(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
        return None

def isVideoValid(url):
   if "/gr/" in url:
       return True
   else:
       return False

def downloadFromStayNow(id, address, price, url):
    try:
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c VideoInputDirPath t·ªìn t·∫°i
        input_dir = Path("VideoInputDirPath")
        input_dir.mkdir(exist_ok=True)
        
        response = requests.get(url)
        if response.status_code == 200:
            with open(f"VideoInputDirPath/{id}_{address}_{price}.mp4", "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            print(f"Downloaded video from StayNow: {id}")
            return f"VideoInputDirPath/{id}.mp4"
        else:
            print(f"Failed to download video from StayNow: {id}")
            return False
    except Exception as e:
        print(f"Error downloading video from StayNow: {e}")
        return False


def downloadVideo(list_url, address, price, id):
    for url in list_url:
        if isVideoValid(url):
            result = downloadFromStayNow(id= id, address=address, price= price, url= url)
            if result:
                print(f"Download video: {url}")
                return True
            
        else:
            print(f"kh√¥ng ph·∫£i video h·ª£p l·ªá: {url}")
    return False

def downAllVideo(ListRoom, total):
    count = 0  # S·ªë video ƒë√£ t·∫£i th√†nh c√¥ng
    index = 0  # V·ªã tr√≠ hi·ªán t·∫°i trong danh s√°ch ph√≤ng
    total_rooms = len(ListRoom)
    
    while count < total and index < total_rooms:
        print(f"ƒêang x·ª≠ l√Ω ph√≤ng {index + 1}/{total_rooms}")
        room = ListRoom[index]
        room_items = room.get("room_items", [])

        # üëâ L·∫•y images c·ªßa room_item ƒë·∫ßu ti√™n (n·∫øu c√≥)
        if room_items:
            list_url = room_items[0].get("images", [])
        else:
            list_url = []

        address = room.get("address")
        price = room.get("price")
        room_id = room.get("id")
        result = downloadVideo(list_url, address, price, room_id)
        
        
        if result is True:
            count += 1
            print(f"ƒê√£ t·∫£i th√†nh c√¥ng {count}/{total} videos")
        else:
            print(f"Kh√¥ng t√¨m th·∫•y video h·ª£p l·ªá t·ª´ ph√≤ng {index + 1}")
            
        index += 1
        
    if count < total:
        print(f"Ch·ªâ t·∫£i ƒë∆∞·ª£c {count}/{total} videos v√¨ ƒë√£ h·∫øt danh s√°ch ph√≤ng")
    else:
        print(f"ƒê√£ t·∫£i ƒë·ªß {total} videos th√†nh c√¥ng!")
    return True

def format_price(price_str):
    """Convert price from "3500000" format to "3m5" format"""
    try:
        price = int(price_str)
        millions = price // 1000000
        remainder = (price % 1000000) // 100000
        if remainder > 0:
            return f"{millions}tr{remainder}"
        return f"{millions}tr"
    except ValueError:
        return price_str

def get_random_music():
    """Get a random music file from MusicDirPath directory"""
    music_dir = Path("MusicDirPath")
    if not music_dir.exists():
        print("Th∆∞ m·ª•c MusicDirPath kh√¥ng t·ªìn t·∫°i!")
        return "MusicDirPath/music.mp3"  # return default if directory doesn't exist
        
    music_files = list(music_dir.glob("*.mp3"))
    if not music_files:
        print("Kh√¥ng t√¨m th·∫•y file nh·∫°c n√†o trong MusicDirPath!")
        return "MusicDirPath/music.mp3"  # return default if no music files
        
    random_music = random.choice(music_files)
    return str(random_music)

def process_videos():
    """
    X·ª≠ l√Ω t·∫•t c·∫£ video trong th∆∞ m·ª•c VideoInputDirPath v√† l∆∞u k·∫øt qu·∫£ v√†o VideosDirPath
    """
    # ƒê·∫£m b·∫£o c·∫£ hai th∆∞ m·ª•c ƒë·ªÅu t·ªìn t·∫°i
    input_dir = Path("VideoInputDirPath")
    output_dir = Path("VideosDirPath")
    
    input_dir.mkdir(exist_ok=True)
    output_dir.mkdir(exist_ok=True)

    # L·∫•y danh s√°ch t·∫•t c·∫£ file .mp4 trong th∆∞ m·ª•c input
    input_videos = list(input_dir.glob("*.mp4"))
    if not input_videos:
        print("Kh√¥ng t√¨m th·∫•y video n√†o trong VideoInputDirPath!")
        return False

    print(f"T√¨m th·∫•y {len(input_videos)} video c·∫ßn x·ª≠ l√Ω")
    
    for video_path in input_videos:
        try:
            print(f"ƒêang x·ª≠ l√Ω video: {video_path.name}")
            
            address = video_path.stem.split('_')[1]
            price = format_price(video_path.stem.split('_')[2])
            video_text = f"{address}/{price}"

            video_editor = VideoEditor(video_path)
            video_editor.change_speed(1.2)
            video_editor
            video_editor.add_audio(get_random_music())
            video_editor.add_text(str(video_text))
            video_editor.save(f"VideosDirPath/{video_path.name}")
            
            print(f"ƒê√£ x·ª≠ l√Ω xong video: {video_path}")
        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω video {video_path.name}: {str(e)}")
            continue

    return True

def get_cookie_files():
    """Get list of cookie files from CookiesDir"""
    cookie_dir = Path("CookiesDir")
    if not cookie_dir.exists():
        print("Th∆∞ m·ª•c CookiesDir kh√¥ng t·ªìn t·∫°i!")
        return []
    
    # L·∫•y danh s√°ch file .cookie v√† ch·ªâ l·∫•y ph·∫ßn username (b·ªè qua ph·∫ßn "tiktok_session-" v√† ".cookie")
    cookie_files = []
    for f in cookie_dir.glob("*.cookie"):
        if f.stem.startswith("tiktok_session-"):
            cookie_files.append(f.stem[len("tiktok_session-"):])
        else:
            cookie_files.append(f.stem)
    
    return cookie_files

def clean_directory(directory: Path):
    """X√≥a t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c"""
    if directory.exists():
        for file in directory.glob("*"):
            if file.is_file():
                file.unlink()
        print(f"ƒê√£ x√≥a t·∫•t c·∫£ file trong th∆∞ m·ª•c {directory}")

def archive_videos(source_dir: Path, archive_dir: Path):
    """Di chuy·ªÉn video ƒë√£ x·ª≠ l√Ω v√†o th∆∞ m·ª•c archive v·ªõi x·ª≠ l√Ω tr√πng t√™n"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        archive_path = archive_dir / timestamp
        archive_path.mkdir(parents=True, exist_ok=True)
        
        for file in source_dir.glob("*.mp4"):
            target_path = archive_path / file.name
            # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p file ƒë√£ t·ªìn t·∫°i
            if target_path.exists():
                base = target_path.stem
                suffix = target_path.suffix
                counter = 1
                while target_path.exists():
                    target_path = archive_path / f"{base}_{counter}{suffix}"
                    counter += 1
            shutil.move(str(file), str(target_path))
        print(f"ƒê√£ di chuy·ªÉn c√°c file t·ª´ {source_dir} v√†o {archive_path}")
        return True
    except Exception as e:
        print(f"L·ªói khi archive video: {str(e)}")
        return False

def cleanup_after_upload(should_archive=True):
    """D·ªçn d·∫πp sau khi upload xong"""
    try:
        input_dir = Path("VideoInputDirPath")
        output_dir = Path("VideosDirPath")
        
        if should_archive:
            print("\n=== ƒêang l∆∞u tr·ªØ video ƒë√£ x·ª≠ l√Ω ===")
            # Ch·ªâ l∆∞u tr·ªØ video t·ª´ VideosDirPath
            archive_videos(output_dir, Path("ArchivedVideos"))
            # X√≥a file trong VideoInputDirPath
            if input_dir.exists():
                clean_directory(input_dir)
        else:
            print("\n=== ƒêang x√≥a video ƒë√£ x·ª≠ l√Ω ===")
            clean_directory(input_dir)
            clean_directory(output_dir)
            
        return True
    except Exception as e:
        print(f"L·ªói khi d·ªçn d·∫πp: {str(e)}")
        return False

def get_random_hashtags(count=5):  # ƒê·ªïi m·∫∑c ƒë·ªãnh xu·ªëng 5 hashtag
    """Tr·∫£ v·ªÅ danh s√°ch hashtag ng·∫´u nhi√™n"""
    all_hashtags = [
        "xuhuong",
        "phongtro",
        "phongtrohanoi",
        "nhatro",
        "nhatrohanoi",
        "trothanhlap",
        "trosinhvien",
        "trogiare",
        "timmaiamhanoi",
        "phongtrodep",
        "nhatrodep",
        "thuetro",
        "timtro",
        "timphongtro",
        "nhatrogiare",
        "dichvuphongtro",
        "phongtrosinhvien",
        "viral"
    ]
    # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng hashtag ƒë·ªÉ tr√°nh ti√™u ƒë·ªÅ qu√° d√†i
    max_hashtags = min(count, 5)  # Gi·ªõi h·∫°n t·ªëi ƒëa 5 hashtag
    selected = random.sample(all_hashtags, min(max_hashtags, len(all_hashtags)))
    return " ".join([f"#{tag}" for tag in selected])

def format_video_title(video_path: Path, include_hashtags=True):
    """Format ti√™u ƒë·ªÅ video v·ªõi hashtag"""
    # L·∫•y th√¥ng tin t·ª´ t√™n file
    room_id = video_path.stem.split('_')[0]
    address = video_path.stem.split('_')[1]
    price = format_price(video_path.stem.split('_')[2])
    
    # T·∫°o ti√™u ƒë·ªÅ c∆° b·∫£n
    title = f"M√£ ph√≤ng {room_id} - {address} - {price}"
    
    # Th√™m hashtag n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if include_hashtags:
        hashtags = get_random_hashtags()
        title = f"{title} {hashtags}"
    
    return title

def upload_videos_to_tiktok():
    """Upload videos to TikTok with increasing schedule time"""
    try:
        # Ki·ªÉm tra th∆∞ m·ª•c VideosDirPath
        videos_dir = Path("VideosDirPath")
        if not videos_dir.exists():
            print("Th∆∞ m·ª•c VideosDirPath kh√¥ng t·ªìn t·∫°i!")
            return False

        # L·∫•y danh s√°ch video c·∫ßn upload
        videos = list(videos_dir.glob("*.mp4"))
        if not videos:
            print("Kh√¥ng t√¨m th·∫•y video n√†o trong VideosDirPath!")
            return False

        # L·∫•y danh s√°ch cookie files
        cookie_files = get_cookie_files()
        if not cookie_files:
            print("Kh√¥ng t√¨m th·∫•y file cookie n√†o!")
            return False

        total_videos = len(videos)
        successful_uploads = 0
        failed_uploads = 0
        
        print(f"T√¨m th·∫•y {total_videos} video v√† {len(cookie_files)} t√†i kho·∫£n")
        print("Danh s√°ch t√†i kho·∫£n:", cookie_files)
        
        # T√≠nh s·ªë nh√≥m upload (m·ªói nh√≥m c√≥ s·ªë video = s·ªë cookie)
        cookies_count = len(cookie_files)
        total_groups = (len(videos) + cookies_count - 1) // cookies_count  # L√†m tr√≤n l√™n
        
        start_time = time.time()
        
        # X·ª≠ l√Ω t·ª´ng nh√≥m video
        for group in range(total_groups):
            print(f"\n=== ƒêang x·ª≠ l√Ω nh√≥m {group + 1}/{total_groups} ===")
            
            # T√≠nh th·ªùi gian c√≤n l·∫°i ∆∞·ªõc t√≠nh
            if group > 0:
                elapsed_time = time.time() - start_time
                avg_time_per_group = elapsed_time / group
                remaining_groups = total_groups - group
                estimated_remaining = avg_time_per_group * remaining_groups
                print(f"∆Ø·ªõc t√≠nh th·ªùi gian c√≤n l·∫°i: {int(estimated_remaining/60)} ph√∫t {int(estimated_remaining%60)} gi√¢y")
            
            # L·∫•y c√°c video cho nh√≥m hi·ªán t·∫°i
            start_idx = group * cookies_count
            end_idx = min(start_idx + cookies_count, len(videos))
            group_videos = videos[start_idx:end_idx]
            
            # Upload t·ª´ng video trong nh√≥m v·ªõi m·ªôt cookie kh√°c nhau
            for i, video in enumerate(group_videos):
                max_retries = 3
                retry_count = 0
                upload_success = False
                
                while retry_count < max_retries and not upload_success:
                    try:
                        # Format ti√™u ƒë·ªÅ video v·ªõi hashtag
                        title = format_video_title(video)
                        
                        # L·∫•y cookie t∆∞∆°ng ·ª©ng
                        current_cookie = cookie_files[i]
                        print(f"\nƒêang upload video {video.name} v·ªõi t√†i kho·∫£n {current_cookie}")
                        print(f"Ti·∫øn ƒë·ªô: {successful_uploads + failed_uploads + 1}/{total_videos}")
                        print(f"Ti√™u ƒë·ªÅ: {title}")
                        
                        # Upload video - kh√¥ng d√πng schedule_time n·ªØa
                        result = tiktok.upload_video(
                            session_user=current_cookie,
                            video=str(video.name),
                            title=title,
                            schedule_time=0,  # Lu√¥n ƒëƒÉng ngay l·∫≠p t·ª©c
                            allow_comment=1,
                            allow_duet=0,
                            allow_stitch=0,
                            visibility_type=0
                        )
                        
                        # In ra gi√° tr·ªã tr·∫£ v·ªÅ ƒë·ªÉ debug
                        print(f"Gi√° tr·ªã tr·∫£ v·ªÅ t·ª´ upload_video: {result}")
                        
                        # Ki·ªÉm tra k·∫øt qu·∫£ upload
                        if result is None:  # N·∫øu h√†m tr·∫£ v·ªÅ None l√† th√†nh c√¥ng (v√¨ ƒë√£ in "Published successfully")
                            print(f"Upload th√†nh c√¥ng video {video.name}")
                            upload_success = True
                            successful_uploads += 1
                            break
                        else:
                            print(f"Upload th·∫•t b·∫°i video {video.name}")
                            if isinstance(result, str) and "invalid parameters" in result.lower():
                                print("L·ªói tham s·ªë kh√¥ng h·ª£p l·ªá, c√≥ th·ªÉ do ti√™u ƒë·ªÅ qu√° d√†i")
                                # Th·ª≠ l·∫°i v·ªõi √≠t hashtag h∆°n
                                title = format_video_title(video, include_hashtags=False)
                                print(f"Th·ª≠ l·∫°i v·ªõi ti√™u ƒë·ªÅ kh√¥ng c√≥ hashtag: {title}")
                            
                            # T√≠nh th·ªùi gian ch·ªù tƒÉng d·∫ßn
                            retry_delay = (retry_count + 1) * 10  # 10s, 20s, 30s
                            retry_count += 1
                            if retry_count < max_retries:
                                print(f"Th·ª≠ l·∫°i l·∫ßn {retry_count + 1} sau {retry_delay} gi√¢y...")
                                time.sleep(retry_delay)
                            
                    except Exception as e:
                        error_msg = str(e).lower()
                        print(f"L·ªói khi upload video {video.name}: {error_msg}")
                        
                        # T√≠nh th·ªùi gian ch·ªù tƒÉng d·∫ßn cho c·∫£ l·ªói k·∫øt n·ªëi
                        retry_delay = (retry_count + 1) * 10
                        if "connection" in error_msg or "timeout" in error_msg:
                            print("L·ªói k·∫øt n·ªëi, ƒë·ª£i l√¢u h∆°n tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                            retry_delay *= 2  # TƒÉng g·∫•p ƒë√¥i th·ªùi gian ch·ªù cho l·ªói k·∫øt n·ªëi (20s, 40s, 60s)
                        
                        retry_count += 1
                        if retry_count < max_retries:
                            print(f"Th·ª≠ l·∫°i l·∫ßn {retry_count + 1} sau {retry_delay} gi√¢y...")
                            time.sleep(retry_delay)
                        continue
                
                if not upload_success:
                    print(f"ƒê√£ th·ª≠ {max_retries} l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng v·ªõi video {video.name}")
                    failed_uploads += 1
        
        # Sau khi upload ho√†n t·∫•t t·∫•t c·∫£ video
        total_time = int(time.time() - start_time)
        print(f"\n=== Upload ho√†n t·∫•t sau {total_time//60} ph√∫t {total_time%60} gi√¢y ===")
        print(f"T·ªïng s·ªë video: {total_videos}")
        print(f"Upload th√†nh c√¥ng: {successful_uploads}")
        print(f"Upload th·∫•t b·∫°i: {failed_uploads}")
        
        cleanup_after_upload(should_archive=True)  # True ƒë·ªÉ archive, False ƒë·ªÉ x√≥a
        return True
        
    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh upload: {str(e)}")
        return False

def count_cookies_files():
    """
    ƒê·∫øm s·ªë file trong th∆∞ m·ª•c CookiesDir
    """
    cookies_dir = Path("CookiesDir")
    if not cookies_dir.exists():
        print("Th∆∞ m·ª•c CookiesDir kh√¥ng t·ªìn t·∫°i!")
        return 0
    
    # ƒê·∫øm t·∫•t c·∫£ c√°c file (kh√¥ng t√≠nh th∆∞ m·ª•c)
    count = len([f for f in cookies_dir.iterdir() if f.is_file()])
    print(f"S·ªë file cookies: {count}")
    return count

if __name__ == "__main__":
    # B∆∞·ªõc 1: T·∫£i video t·ª´ API
    cookies_count = count_cookies_files()
    if cookies_count == 0:
        print("Kh√¥ng c√≥ file cookies n√†o!")
        exit(1)
        
    total = 3 * cookies_count  
    ListRoom = get_rooms_from_api()
    
    if not ListRoom:
        print("Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√≤ng t·ª´ API")
        exit(1)

    if not downAllVideo(ListRoom, total):
        print("L·ªói khi t·∫£i video t·ª´ API")
        exit(1)

    # B∆∞·ªõc 2: X·ª≠ l√Ω video
    print("\n=== B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video ===")
    if not process_videos():
        print("L·ªói khi x·ª≠ l√Ω video")
        exit(1)

    # B∆∞·ªõc 3: Upload l√™n TikTok
    print("\n=== B·∫Øt ƒë·∫ßu upload l√™n TikTok ===")
    if not upload_videos_to_tiktok():
        print("L·ªói khi upload l√™n TikTok")
        exit(1)

    print("\nHo√†n th√†nh t·∫•t c·∫£ c√°c b∆∞·ªõc!")

    
